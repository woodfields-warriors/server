syntax = "proto3";

package game;

option java_package = "com.wwttr.game";
option java_outer_classname = "Api";
option java_generic_services = true;

service GameService {
  rpc CreateGame (CreateGameRequest) returns (CreateResponse);
  rpc LeaveGame (LeaveGameRequest) returns (Empty);
  rpc DeleteGame (DeleteGameRequest) returns (Empty);
  rpc GetGame (GetGameRequest) returns (Game);
  rpc StartGame (StartGameRequest) returns (Game);
  rpc ListGames (ListGamesRequest) returns (ListGamesResponse);
  rpc StreamGames (StreamGamesRequest) returns (stream Game);
  rpc CreatePlayer (CreatePlayerRequest) returns (CreatePlayerResponse);
  rpc GetPlayer (GetPlayerRequest) returns (Player);
  rpc StreamPlayerStats (StreamPlayerStatsRequest) returns (stream PlayerStats);
  rpc TogglePlayerStats (Empty) returns (Empty);
  rpc StreamHistory (StreamHistoryRequest) returns (stream GameAction);
}

message Game {
  // The unique identifier of the game.
  // Server assigned. Required when updating.
  string game_id = 1;
  // The name displayed to users for the game.
  // Required.
  string display_name = 2;
  // The maximum number of users allowed to join this game.
  // Defaults to 6. Must be in the range [2, 6].
  int32 max_players = 3;
  // The game owner
  // Required.
  string host_player_id = 4;
  //list of players in games
  //can be null
  repeated string player_ids = 5;
  //current status of the game
  //when created, it should be PRE
  //Required
  Status status = 6;

  enum Status{
    UNKNOWN = 0;
    PRE = 1;
    STARTED = 2;
    FINISHED = 3;
    LAST_ROUND = 4;
  }



  //List of players currently in game
  // Required
  //repeated int32 player_user_ids = 5;
  // Max number of players for the game allowed
  //int32 max_players = 6;
  //status....

}

message GameAction{
  // The unique identifier of the message.
  // Server assigned.
  string action_id = 1;

  //The contents of the message.  What different players see
  string action = 2;

  //Server assigned.  The time the action occured
  int32 timestamp = 3;

  //The player Id associated witht the player who took the action
  string player_id = 4;

}

//-----------------Requests-------------//
message CreateGameRequest {
  //The userID of User trying to create the game
  string user_id = 1;
  //The desired name for display in Lobby
  // Required.
  string display_name = 2;
  //The number of players desired in game
  int32 maxPlayers = 3;
}

message LeaveGameRequest {
  //the player who wants to leave
  string player_id = 1;
  //the game the player wants to leave
  string game_id = 2;
}

message ListGamesRequest {

}

message StreamGamesRequest {
  
}

message GetGameRequest {
  // The id of the game to return.
  // Required.
  string game_id = 1;
}

message StartGameRequest{
  //The id of the game to start
  string game_id = 1;
}
message DeleteGameRequest {
  // The id of the game to delete.
  // Required.
  string game_id = 1;
}

message StreamHistoryRequest {
  string game_id = 1;
}



message CreatePlayerRequest{
  //the id of the user who wants to join a game
  string user_id = 1;
  //the id of the game the user wants to join
  string game_id = 2;
}

message Player {
  // The player's unique identifier.
  // Server assigned. Required when updating.
  string id = 1;
  // The id of the account this player represents.
  string account_id = 2;
  // The id of the game this player is a part of.
  string game_id = 3;
  // The color that the player will be inGame and lobby
  Color color = 4;
  //The username of the player
  string username = 5;

  enum Color{
    UNKNOWN = 0;
    RED = 1;
    BLUE = 2;
    GREEN = 3;
    YELLOW = 4;
    PURPLE = 5;
    ORANGE = 6;
  }
}

message GetPlayerRequest {
  string player_id = 1;
}


//---------------------Responses------------//

message Empty {}

message ListGamesResponse {
  // The list of games.
  repeated Game games = 1;
}

message CreateResponse {
	//The display name for the game
	string game_id = 1;
	//Current number of players in the game
	string player_id = 2;

}

message DeleteResponse {
	//The display name for the game
	string game_name =1;
	//Current number of players in the game
	repeated int32 orphaned_users = 2;

}
message CreatePlayerResponse{
  string player_id = 1;
}

message StreamPlayerStatsRequest {
  string game_id = 1;
}

message PlayerStats {
  string player_id = 1;
  int32 train_card_points = 2;
  int32 longest_route_points = 6;
  int32 destination_card_points = 7;
  int32 train_count = 3;
  int32 train_card_count = 4;
  int32 destination_card_count = 5;
  PlayerTurnState turn_state = 8;
}

enum PlayerTurnState {
  UNSPECIFIED_PLAYER_TURN_STATE = 0;
  PENDING = 1;
  START = 2;
  MID = 3;
  GAME_ENDED = 4;
  FIRST = 5;
}
